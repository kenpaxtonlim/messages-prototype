{"version":3,"sources":["CustomerPane/iphone.png","CustomerPane/square.png","CustomerPane/CustomerPane.js","MessagesPane/sparkle.svg","MessagesPane/MessagesPane.js","App.js","reportWebVitals.js","index.js","MessagesController.js"],"names":["observer","props","conversation","sendMessage","useState","message","setMessage","bodyRef","useRef","useEffect","current","scroll","behavior","left","top","scrollHeight","className","src","phone","alt","square","ref","map","utterance","index","speaker","text","value","onChange","e","target","placeholder","onKeyDown","key","shiftKey","suggestion","sparkle","onClick","controller","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","this","makeAutoObservable","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75a24d6a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iphone.d3f4ec0d.png\";","export default __webpack_public_path__ + \"static/media/square.2d24f7b0.png\";","import { useEffect, useRef, useState } from 'react';\nimport { observer } from \"mobx-react\";\nimport phone from './iphone.png';\nimport square from './square.png';\nimport './CustomerPane.scss';\n\nfunction CustomerPane(props) {\n  const { conversation, sendMessage } = props;\n  const [message, setMessage] = useState('');\n\n  const bodyRef = useRef();\n  useEffect(() => {\n    if (bodyRef && bodyRef.current) {\n      bodyRef.current.scroll({\n        behavior: 'smooth',\n        left: 0,\n        top: bodyRef.current.scrollHeight\n      });\n    }\n  }, [conversation]);\n\n  return (\n    <div className=\"CustomerPane\">\n      <img src={phone} alt=\"Customer\" className=\"phone\" />\n      <div className=\"screen\">\n        <div className=\"header\">\n          <div className=\"square-container\">\n            <img src={square} alt=\"Square\" className=\"square\" />\n          </div>\n          <span className=\"square-text\">Square</span>\n        </div>\n        <div className=\"body\" ref={bodyRef}>\n          <div className=\"body-content\">\n            {conversation.map((utterance, index) => {\n              return (\n                <div className={utterance.speaker === 'customer' ? 'utterance-user' : 'utterance-other'} key={index}>\n                  {utterance.text}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        <div className=\"footer\">\n          <input\n            className=\"input\"\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n            placeholder=\"Text message\"\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                sendMessage(message, 'customer');\n                setMessage('');\n              }\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default observer(CustomerPane);\n","export default __webpack_public_path__ + \"static/media/sparkle.8272ace5.svg\";","import { useRef, useState, useEffect } from 'react';\nimport { observer } from \"mobx-react\";\nimport sparkle from './sparkle.svg';\nimport './MessagesPane.scss';\n\nfunction MessagesPane(props) {\n  const { conversation, sendMessage, suggestion } = props;\n  const [message, setMessage] = useState('');\n\n  const bodyRef = useRef();\n  useEffect(() => {\n    if (bodyRef && bodyRef.current) {\n      bodyRef.current.scroll({\n        behavior: 'smooth',\n        left: 0,\n        top: bodyRef.current.scrollHeight\n      });\n    }\n  }, [conversation]);\n\n  return (\n    <div className=\"MessagesPane\">\n      <div className=\"header\">\n        John Doe\n      </div>\n      <div className=\"body\" ref={bodyRef}>\n        <div className=\"body-content\">\n          {conversation.map((utterance, index) => {\n            return (\n              <div className={utterance.speaker === 'merchant' ? 'row-user' : 'row-other'}>\n                {utterance.speaker === 'customer' ?\n                  <div className=\"picture\">\n                    JD\n                  </div>\n                : null}\n                <div className={utterance.speaker === 'merchant' ? 'utterance-user' : 'utterance-other'} key={index}>\n                  {utterance.text}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n      <div className=\"footer\">\n        {suggestion !== '' ? <div className=\"suggestion-container\">\n          <div className=\"suggestion-header\">\n            <img src={sparkle} alt=\"Suggestion\" className=\"sparkle\" />\n            Auto Reply\n          </div>\n          <div className=\"suggestion-body\">\n            {suggestion}\n          </div>\n          <div className=\"suggestion-footer\">\n            <div className=\"button\" onClick={() => sendMessage(suggestion, 'merchant')}>Send</div>\n          </div>\n        </div> : null}\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n            placeholder=\"Send via text\"\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                sendMessage(message, 'merchant');\n                setMessage('');\n              }\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default observer(MessagesPane);\n","import { observer } from \"mobx-react\";\nimport CustomerPane from './CustomerPane/CustomerPane';\nimport MessagesPane from './MessagesPane/MessagesPane';\nimport './App.scss';\n\nfunction App(props) {\n  const { controller } = props;\n\n  return (\n    <div className=\"App\">\n      <CustomerPane conversation={controller.conversation} sendMessage={controller.sendMessage} />\n      <MessagesPane conversation={controller.conversation} sendMessage={controller.sendMessage} suggestion={controller.suggestion} />\n    </div>\n  );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport MessagesController from './MessagesController';\n\nconst controller = new MessagesController();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App controller={controller} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class MessagesController {\n  conversation = [];\n  suggestion = \"\";\n\n  constructor() {\n    this.conversation = [\n      {\n        text: 'Hello',\n        speaker: 'merchant',\n      },\n      {\n        text: 'How are you?',\n        speaker: 'customer',\n      }\n    ];\n\n    makeAutoObservable(this);\n  }\n\n  sendMessage = (text, speaker) =>{\n    this.conversation = [ ...this.conversation, {text, speaker} ];\n    if (speaker === 'customer') {\n      this.suggestion = \"I'm sorry to hear that. Please accept this coupon.\";\n    } else {\n      this.suggestion = '';\n    }\n  }\n}\n"],"sourceRoot":""}