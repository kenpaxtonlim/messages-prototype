{"version":3,"sources":["CustomerPane/iphone.png","CustomerPane/square.png","CustomerPane/CustomerPane.js","MessagesPane/sparkle.svg","MessageInput/MessageInput.js","MessagesPane/MessagesPane.js","App.js","reportWebVitals.js","index.js","MessagesController.js"],"names":["observer","props","conversation","sendMessage","useState","message","setMessage","bodyRef","useRef","useEffect","current","scroll","behavior","left","top","scrollHeight","className","src","phone","alt","square","ref","map","utterance","index","speaker","text","value","onChange","e","target","placeholder","onKeyDown","key","shiftKey","prediction","fetchAutoComplete","predictionText","charAt","length","rows","setRows","timeout","clearTimeout","setTimeout","autoReply","autoComplete","clearAutoComplete","sparkle","onClick","startsWith","preventDefault","controller","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fetchAutoReply","customerInput","fetch","method","mode","headers","body","JSON","stringify","user_input","resp","json","data","predictions","result","merchantInput","previousCustomerUtterance","previousUtterance","merchant_input","auto_complete_length","use_trie","clearAutoReply","this","makeAutoObservable","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed076e24.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iphone.d3f4ec0d.png\";","export default __webpack_public_path__ + \"static/media/square.2d24f7b0.png\";","import { useEffect, useRef, useState } from 'react';\nimport { observer } from \"mobx-react\";\nimport phone from './iphone.png';\nimport square from './square.png';\nimport './CustomerPane.scss';\n\nfunction CustomerPane(props) {\n  const { conversation, sendMessage } = props;\n  const [message, setMessage] = useState('');\n\n  const bodyRef = useRef();\n  useEffect(() => {\n    if (bodyRef && bodyRef.current) {\n      bodyRef.current.scroll({\n        behavior: 'smooth',\n        left: 0,\n        top: bodyRef.current.scrollHeight\n      });\n    }\n  }, [conversation]);\n\n  return (\n    <div className=\"CustomerPane\">\n      <img src={phone} alt=\"Customer\" className=\"phone\" />\n      <div className=\"screen\">\n        <div className=\"header\">\n          <div className=\"square-container\">\n            <img src={square} alt=\"Square\" className=\"square\" />\n          </div>\n          <span className=\"square-text\">Square</span>\n        </div>\n        <div className=\"body\" ref={bodyRef}>\n          <div className=\"body-content\">\n            {conversation.map((utterance, index) => {\n              return (\n                <div className={utterance.speaker === 'customer' ? 'utterance-user' : 'utterance-other'} key={index}>\n                  {utterance.text}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        <div className=\"footer\">\n          <input\n            className=\"input\"\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n            placeholder=\"Text message\"\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                sendMessage(message, 'customer');\n                setMessage('');\n              }\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default observer(CustomerPane);\n","export default __webpack_public_path__ + \"static/media/sparkle.8272ace5.svg\";","import { useEffect, useRef, useState } from 'react';\nimport { observer } from \"mobx-react\";\nimport './MessageInput.scss';\n\nfunction MessageInput(props) {\n  const { value, prediction, placeholder, onChange, onKeyDown, fetchAutoComplete } = props;\n  let predictionText = prediction === '' ? value : prediction;\n  if (value !== '' && value.charAt(value.length - 1) === '\\n') {\n    predictionText += ' ';\n  }\n\n  const ref = useRef();\n  const [ rows, setRows ] = useState(1);\n  useEffect(() => {\n    if (ref && ref.current) {\n      if (ref.current.scrollHeight > 17) {\n        setRows(ref.current.scrollHeight / 17);\n      } else {\n        setRows(1);\n      }\n    }\n  }, [value, prediction]);\n\n  let timeout = useRef();\n  useEffect(() => {\n    if (value !== '') {\n      clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => {\n        fetchAutoComplete(value);\n      }, 1000);\n    } else {\n      clearTimeout(timeout.current);\n    }\n  }, [value, fetchAutoComplete]);\n\n  return (\n    <div className=\"MessageInput\">\n      <div className=\"MessageInput__suggestion\" ref={ref}>{predictionText}</div>\n      <textarea\n        className=\"MessageInput__input\"\n        rows={rows}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n      />\n    </div>\n  );\n}\n\nexport default observer(MessageInput);\n","import { useRef, useState, useEffect } from 'react';\nimport { observer } from \"mobx-react\";\nimport sparkle from './sparkle.svg';\nimport './MessagesPane.scss';\nimport MessageInput from '../MessageInput/MessageInput';\n\nfunction MessagesPane(props) {\n  const { conversation, sendMessage, autoReply, autoComplete, fetchAutoComplete, clearAutoComplete } = props;\n  const [message, setMessage] = useState('');\n\n  const bodyRef = useRef();\n  useEffect(() => {\n    if (bodyRef && bodyRef.current) {\n      bodyRef.current.scroll({\n        behavior: 'smooth',\n        left: 0,\n        top: bodyRef.current.scrollHeight\n      });\n    }\n  }, [conversation, autoReply]);\n\n  return (\n    <div className=\"MessagesPane\">\n      <div className=\"header\">\n        John Doe\n      </div>\n      <div className=\"body\" ref={bodyRef}>\n        <div className=\"body-content\">\n          {conversation.map((utterance, index) => {\n            return (\n              <div className={utterance.speaker === 'merchant' ? 'row-user' : 'row-other'} key={index}>\n                {utterance.speaker === 'customer' ?\n                  <div className=\"picture\">\n                    JD\n                  </div>\n                : null}\n                <div className={utterance.speaker === 'merchant' ? 'utterance-user' : 'utterance-other'}>\n                  {utterance.text}\n                </div>\n              </div>\n            )\n          })}\n          {autoReply !== '' ?\n          <div className=\"row-user\">\n            <div className=\"utterance-suggestion\">\n              <div className=\"utterance-suggestion-header\">\n                <img src={sparkle} alt=\"Suggestion\" className=\"sparkle\" />\n                Smart Reply\n              </div>\n              {autoReply}\n            </div>\n            <div className=\"utterance-send-status\">\n              {'Not delivered. '}\n              <span className=\"underline\" onClick={() => sendMessage(autoReply, 'merchant')}>Send</span>\n            </div>\n          </div>\n        : null}\n        </div>\n      </div>\n      <div className=\"footer\">\n        {/*suggestion !== '' ?\n        <div className=\"suggestion-container\">\n          <div className=\"suggestion-header\">\n            <img src={sparkle} alt=\"Suggestion\" className=\"sparkle\" />\n            Smart Reply\n          </div>\n          <div className=\"suggestion-body\">\n            {suggestion}\n          </div>\n          <div className=\"suggestion-footer\">\n            <div className=\"button\" onClick={() => sendMessage(suggestion, 'merchant')}>Send</div>\n          </div>\n        </div>\n        : null*/}\n        <MessageInput\n          value={message}\n          prediction={message !== '' && autoComplete.startsWith(message) ? autoComplete : ''}\n          fetchAutoComplete={fetchAutoComplete}\n          placeholder=\"Send via text\"\n          onChange={e => setMessage(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              sendMessage(message, 'merchant');\n              setMessage('');\n            }\n            if (e.key === 'Tab') {\n              e.preventDefault();\n              setMessage(autoComplete);\n            }\n            if (e.key === 'Backspace') {\n              clearAutoComplete();\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default observer(MessagesPane);\n","import { observer } from \"mobx-react\";\nimport CustomerPane from './CustomerPane/CustomerPane';\nimport MessagesPane from './MessagesPane/MessagesPane';\nimport './App.scss';\n\nfunction App(props) {\n  const { controller } = props;\n\n  return (\n    <div className=\"App\">\n      <CustomerPane conversation={controller.conversation} sendMessage={controller.sendMessage} />\n      <MessagesPane\n        conversation={controller.conversation}\n        sendMessage={controller.sendMessage}\n        autoReply={controller.autoReply}\n        autoComplete={controller.autoComplete}\n        fetchAutoComplete={controller.fetchAutoComplete}\n        clearAutoComplete={controller.clearAutoComplete}\n      />\n    </div>\n  );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport MessagesController from './MessagesController';\n\nconst controller = new MessagesController();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App controller={controller} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class MessagesController {\n  conversation = [];\n  autoReply = '';\n  autoComplete = '';\n\n  constructor() {\n    this.conversation = [\n      {\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',\n        speaker: 'merchant',\n      },\n      {\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',\n        speaker: 'customer',\n      },\n      {\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',\n        speaker: 'merchant',\n      },\n      {\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',\n        speaker: 'customer',\n      },\n      {\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',\n        speaker: 'merchant',\n      },\n      {\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',\n        speaker: 'customer',\n      },\n      {\n        text: 'Hello',\n        speaker: 'merchant',\n      },\n      {\n        text: 'Hey there',\n        speaker: 'customer',\n      },\n    ];\n\n    makeAutoObservable(this);\n  }\n\n  sendMessage = (text, speaker) => {\n    this.conversation = [ ...this.conversation, {text, speaker} ];\n    if (speaker === 'customer') {\n      this.fetchAutoReply(text);\n    } else {\n      this.autoReply = '';\n      this.autoComplete = '';\n    }\n  }\n\n  fetchAutoReply = (customerInput) => {\n    fetch('https://corgi.mysquarephone.com/post/auto_complete_service', {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        user_input: customerInput,\n        mode: 'auto-reply',\n      }),\n    })\n    .then(resp => resp.json())\n    .then(data => {\n      const predictions = data.result.prediction;\n      if (predictions && predictions.length > 0) {\n        this.autoReply = predictions[0];\n      }\n    });\n  }\n\n  fetchAutoComplete = (merchantInput) => {\n    let previousCustomerUtterance = '';\n    if (this.conversation.length > 0) {\n      const previousUtterance = this.conversation[this.conversation.length - 1];\n      if (previousUtterance.speaker === 'customer') {\n        previousCustomerUtterance = previousUtterance.text;\n      }\n    }\n    fetch('https://corgi.mysquarephone.com/post/auto_complete_service', {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        user_input: previousCustomerUtterance,\n        merchant_input: merchantInput,\n        mode: 'auto-complete',\n        auto_complete_length: 5,\n        use_trie: true,\n      }),\n    })\n    .then(resp => resp.json())\n    .then(data => {\n      const predictions = data.result.prediction;\n      if (predictions && predictions.length > 0) {\n        this.autoComplete = predictions[0];\n      }\n    });\n  }\n\n  clearAutoReply = () => {\n    this.autoReply = '';\n  }\n\n  clearAutoComplete = () => {\n    this.autoComplete = '';\n  }\n}\n"],"sourceRoot":""}